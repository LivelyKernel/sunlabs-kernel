<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html debug="false" xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Lively Kernel Tutorial</title>
  </head>
  
  <body topmargin="0" leftmargin="0">
    <script src="../firebug/firebug.js"/>
    <script src="../prototype.js"/>
    <script src="../fontinfo.js"/>
    
    <h2>Lively Kernel Tutorial: (11) Worlds and Subworlds</h2>
    <button onclick="window.location='index.xhtml'">Back to Introduction</button>
    <button onclick="window.location='Tutorial10-Applications.xhtml'">PREVIOUS</button>
    <button onclick="window.location='Tutorial11-Subworlds.js'">Source code of this demo</button>
    <button onclick="window.location='Tutorial12-OnTheFly.xhtml'">NEXT</button>
    <hr />
    <p>
    Lively Kernel applications and widgets usually live in an environment known
    as the <i>world</i>.  A world is a visual container that can contain 
    various types of objects and applications simultaneously.<br />
    Each world can contain any number of <i>subworlds</i>, identified by
    spiderweb-like <i>LinkMorph icons</i>.<br />
    You can create new subworlds by choosing the "<i>new object...</i>"
    operation from the popup menu of the world (i.e., popup menu of
    the background of the display).<br />
    You can transport objects from one world to another using the "<i>wormhole</i>"
    feature: When you drag objects onto a <i>LinkMorph</i>, the objects are 
    immediately transported to the other world.
    </p>    
        <img src="Tutorial11-Image1.PNG"/>
        <img src="Tutorial11-Image2.PNG"/>
        <img src="Tutorial11-Image3.PNG"/>
    <hr />
    
    <p>
    <b>Try it yourself!</b> Try clicking the subworld icon (<i>LinkMorph</i>) below.
    Come back from the subworld by clicking the corresponding LinkMorph in the subworld.<br />
    Try creating new subworlds yourself using the "<i>new object...</i>"
    operation available in the popup menu of the world.<br />
    Furthermore, try transporting objects across worlds using the <i>wormhole</i> feature.
    </p>
    <div>  
        <svg id="canvas"
             width="80%" height="100%" 
             xmlns="http://www.w3.org/2000/svg" 
             xmlns:lively="http://www.experimentalstuff.com/Lively"
             xmlns:xlink="http://www.w3.org/1999/xlink"
             xmlns:xhtml="http://www.w3.org/1999/xhtml"
             xmlns:D="DAV"
             xml:space="preserve"
             zoomAndPan="disable">
        
        <defs id="Defaults">
        
        <script type="text/ecmascript" xlink:href="../defaultconfig.js"/>
        <script type="text/ecmascript"> <![CDATA[ var Config = {} ]]> </script>
        <script type="text/ecmascript" xlink:href="../prototype.js"/>
        <script type="text/ecmascript" xlink:href="../localconfig.js"/> <!-- ignored if file not there -->
        <script type="text/ecmascript" xlink:href="../Core.js"/>
        <script type="text/ecmascript" xlink:href="../svgtext-compat.js"/>
        <script type="text/ecmascript" xlink:href="../Text.js"/>
        <xhtml:iframe onload="Loader.insertContents(this)"  src="../Definitions.svg"/>
        <script type="text/ecmascript" xlink:href="../Widgets.js"/>
        <script type="text/ecmascript" xlink:href="../Tools.js"/>
        <script type="text/ecmascript" xlink:href="Tutorial11-Subworlds.js"/>
        
        </defs>
        
        </svg>
    </div>
    <hr />
  </body>
</html>
