<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0b5/rng/docbook.rng" type="xml"?>
<!-- 
     simple, slow way of generating html from the command line:
     xsltproc http://docbook.sourceforge.net/release/xsl/current/html/docbook.xsl paper.xml > paper.html
-->
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
  <info>
    <title>The Lively Kernel Application Framework</title>
<!--    <subtitle></subtitle> -->
    <keywordset>
      <keyword>SVG</keyword>
      <keyword>GUI Frameworks</keyword>
      <keyword>Web Applications</keyword>
    </keywordset>
    <author>
      <personname>
        <firstname>Krzysztof</firstname>
        <surname>Palacz</surname>
      </personname>
      <email>krzysztof.palacz@sun.com</email>
      <!-- <personblurb><para>Krzysztof Palacz is blah blah</para></personblurb>  -->
      <affiliation>
	<!--        <jobtitle>Staff Engineer</jobtitle> -->
        <org>
          <orgname>Sun Microsystems Laboratories</orgname>
	  <!--          <orgdiv></orgdiv> -->
          <address>
            <city>Menlo Park</city>
            <street>16 Network Circle</street>
	    <!--            <postcode>8610</postcode>
			    <country>USA</country>
			    <phone></phone>
			    <fax></fax>
			    -->
          </address>   
        </org>
      </affiliation>
      
    </author>
    <author>
      <personname>
	<firstname>Dan</firstname>
	<surname>Ingalls</surname>
      </personname>
      <email>dan.ingalls@sun.com</email>
    </author>
    <abstract>
      <para>
	The Lively Kernel is a fully interactive, "zero-installation" Web
application framework and development environment and written entirely
in JavaScript. The rich user experience of applications built using
the Lively Kernel is enabled by integrated programmatic access to
arbitrary, dynamic 2D graphics, and owed in no small part to its
reliance on Scalable Vector Graphics and its bindings to the
JavaScript language.
</para>

<para>
Lively Kernel runs in SVG-enabled Web browsers without installation or
plug-in requirements; it offers a compact and extensible set of user
interface components, as a result, it supports familiar desktop-style
applications with the expected user interface functionality and direct
manipulation capabilities; it enables application development and
deployment in a Web browser with no installation or upgrades, using
only existing Web technologies. In addition to its application
execution capabilities, the Lively Kernel also functions as an
integrated development environment (IDE), as a result, it is
self-supporting and able to improve and extend itself
dynamically. Lively Kernel is currently also one of the most sizable
dynamic SVG frameworks available, and has become an important test
case for SVG implementations in Web browsers.
</para>

<para>
The main component of the Lively Kernel is a user interface framework
called Morphic, originally developed for the Self language, and later
incorporated into Squeak (a version of the Smalltalk programming
language). The Morphic framework consists of about 10,000 lines of
uncompressed JavaScript code downloaded to the Web browser on Lively
Kernel startup. The central goal of Morphic is to facilitate
construction and editing of graphical objects, both programmatically
and by direct, interactive manipulation. Morphic objects are editable,
composable and animatable, Morphic also handles user input and manages
underlying system resources such as fonts, gradients or
images. Built-in mechanisms are provided for object scaling, rotation,
object editing, as well as for defining user interface
themes. Currently, visual editing tools are provided for only a subset
of the elements defined in the SVG specification, however, our system
could be straightforwardly extended to act as a complete SVG authoring
tool.
</para>

<para>
The Morphic framework also provides a library of higher level user
interface components, such as buttons, lists, menus, windows, etc.,
composed from the basic graphical objects, as well as a
Model-View-Controller infrastructure for abstracting visual
representation of data from application logic. The default
configuration of the Lively Kernel offers a familiar desktop metaphor
with multiple applications running concurrently, however, standalone
applications are also supported.
</para>

<para>
The Morphic framework includes tools for development, modification and
deployment of applications from within the Lively Kernel system
itself. The tools include a class browser, an object inspector and a
DOM inspector. The implementation of these tools relies on the
reflective capabilities of JavaScript, and can therefore be used
inside the Web browser without any external tools or IDEs. As a
result, it is possible to, e.g., create new JavaScript classes, modify
or delete existing methods, or change the value of any property in the
system. Finally, it is possible to dynamically export and import
objects or entire Web pages from within a running system and thus use
the Lively Kernel as an authoring environment both code and
interactive graphics. The export mechanism currently uses our own
implementation of the Distributed Authoring and Versioning (WebDAV)
extensions built on top of asynchronous HTTP networking support
present in all the modern browsers. Objects are serialized into valid
SVG files with additional Lively Kernel-specific annotations necessary
to reconstruct all the JavaScript objects on deserialization. The
annotations are placed in a dedicated XML namespace, as a result, if a
Lively Kernel runtime is not available at deserialization time or the
user agent does not support JavaScript, the serialized file is
rendered as a static screenshot of the application at the time of
serialization.
</para>
</abstract>
</info>
<section>
<!-- stolen from the ecoop paper -->
<title>Time for change</title>
There is no good reason for Web Programming to be more complicated, less general, or any less fun 
than desktop or other programming.  There are reasons, of course -- reasons that go back to missed 
opportunities when the web was designed -- but these need not hold us back.  In this paper we describe 
a simple and general kernel for programming the web.  It is less than 10,000 lines of code (with 
comments), it runs in major browsers with no installation, and it performs well.  We call it the Lively 
Kernel. 
We inherit from the World Wide Web an architecture built around a text markup language.  The Lively 
Kernel sets that architecture aside in favor of modern graphics and a dynamic programming language. 
We begin by turning the conventional we programming "stack" upside-down as shown in Figure 2. 
Figure 2:  Turning Web Programming Upside-Down
The first priority of this architecture is to provide a world of active objects.  This is accomplished by 
putting a dynamic language close to the operating system, which allows both the infrastructure 
(widgets, etc.) and the application to share the same pervasive generality and power.  The compactness 
and capability of our small system validates this approach. 
<!-- end stolen -->
</section>

<section>
<!-- stolen from the ecoop paper-->
<title>A quick summary of the Morphic architecture</title>
The Morphic architecture is very simple.  It defines a class of graphical objects, or “morphs”, each of 
which has some or all of the following properties: 
<itemizedlist mark='bullet'>
  <listitem> <para>
      A shape, or graphical appearance
  </para> </listitem>
  <listitem> <para>
      A set of submorphs, comprising the “scene graph” of the page or world
  </para> </listitem>
  <listitem> <para>
      A coordinate transformation that affects its shape and any submorphs
  </para> </listitem>
  <listitem> <para>
      An event handler for mouse and keyboard events 
  </para> </listitem>
  <listitem> <para>
      An editor for changing its shape 
  </para> </listitem>
  <listitem> <para>
      A layout manager for laying out its submorphs 
  </para> </listitem>
  <listitem> <para>
      A stepping protocol for time-varying behavior 
  </para> </listitem>
  <listitem> <para> A damage rectangle repainting protocol and
      double-buffered display mechanism when this is not available in
      the underlying graphics
  </para> </listitem>
</itemizedlist>

A WorldMorph captures the notion of an entire web page; its shape
defines its background appearance if any, and its submorphs comprise
all the remaining content of the page.  A HandMorph is the Morphic
generalization of the cursor; it can be used to pick up, move, and
deposit other morphs, its shape may change to indicate different
cursor states, and it is the source of user events in the
architecture.  In th Lively Kernel, a Morphic world may have several
hands active at the same time, corresponding to several collaborating
users of that world, and multiple worlds may be linked in the manner
of linked web pages.  Interested readers are referred to the original
papers on Morphic [see References], and to the Lively Kernel technical
documentation.
</section>

<section>
<title>Mapping Morphic onto SVG</title>


Natural mapping Morphs onto &lt;g&gt; elements.

Natural mapping of Shapes onto &lt;g&gt; elements.

SVG is a DAG.
Mapping of paint servers and other leaf-ish elements (referred to by xlink references). 
Ownership model for paint servers (relative to serialization).
<!-- What does it have to do with Lessphic-->


Implementation strategies: (1) morphs are &lt;g&gt; elements (2) morphs wrap &lt;g&gt; elements.



</section>

<section>
<title>Lively Kernel as a Graphics Kernel</title> 

Imperative API for
SVG, hiding the XML underpinnings and hence portable to different
architectures. API JS-centric (hence no XBL, even though similar interest in reusable components).


<programlisting><![CDATA[
319 Host Interface – Browser API plus XML utility functions 
515 Utility – Classes, collections, printing, etc. (plus 562 in Prototype.js) 
833 Basic Graphics – Point, Rectangle, Transform, Color, Gradient, Image 
550 Shapes – Host graphical objects (SVG node API) 
1667 Morph – Basic protocol 
1170 Morphic Core -- World, Hand, Event, Handles, Handlers 
1188 Basic Widgets – Button, List, Menu, Dialog, Slider, Selection, ImageMorph 
1921 Text – basic TextMorph plus composition and rich text 
747 Editors – Drag/drop manipulation, shape editors and text editing 
also ColorPicker and StylePanel 
386 Model, Widget 
1295 High Level Widgets – Scroll panes, panels, windows, world links 
also Panel and Browser support 
1311 Tools – Browser, inspector, stack viewer, change lists, profiler 
406 Serialization – Copier, exporter, importer (plus 202 in JSON) 
281 Network – URL, HTTP, WebDAV basics 
365 Storage – WebDAV, file browser 
----- ----- 
12954 Total 
Figure 10:  Breakdown of Lively Kernel by function with approximate code size 
The figures above include comments and lines with single bracket characters.  Prototype.js is an open 
source set  of useful  JavaScript  extensions,  of which we use only a small  number [see 
http://www.prototypejs.org/], and JSON is a nice encoding for JavaScript objects by Doug Crockford 
[see http://www.JSON.org/]. 
]]></programlisting>
</section>

<section>
<title>SVG as application description format component</title>

</section>

<section>
<title>Experiences with SVG implementations</title>
Firefox, Safari, Batik, Examotion, Opera.
</section>

<bibliography xmlns="http://docbook.org/ns/docbook">
  <title>References</title>
  
  <biblioentry>
    <!--      <abbrev>LK-TR</abbrev> -->
    <authorgroup>
      <author><personname> <firstname>Antero</firstname><surname>Taivalsaari</surname> </personname></author>
      <author><personname> <firstname>Tommi</firstname><surname>Mikkonen</surname> </personname></author>
      <author><personname> <firstname>Dan</firstname><surname>Ingalls</surname> </personname></author>
      <author><personname> <firstname>Krzysztof</firstname><surname>Palacz</surname> </personname></author>
    </authorgroup>
    <title>Web Browser as an Application Platform: The Lively Kernel Experience</title>
  </biblioentry>
  
</bibliography>


</article>
